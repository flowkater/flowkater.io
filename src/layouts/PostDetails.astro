---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  summary: summaryFromFrontmatter,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

const summary = summaryFromFrontmatter ?? description;

const keywordsList =
  Array.isArray(post.data.keywords) && post.data.keywords.length
    ? post.data.keywords
    : tags;
const keywordString = keywordsList.filter(Boolean).join(", ");
const articleSection = tags[0] ?? "blog";
const inLanguage = SITE.lang ?? "ko";
const postBodyCandidate = (post as { body?: unknown }).body;
const rawBody = typeof postBodyCandidate === "string" ? postBodyCandidate : "";
const sanitizedBody = rawBody
  .replace(/```[\s\S]*?```/g, " ")
  .replace(/`[^`]*`/g, " ")
  .replace(/<[^>]+>/g, " ")
  .replace(/\s+/g, " ");
const wordCount = sanitizedBody.trim().length
  ? sanitizedBody.trim().split(/\s+/).filter(Boolean).length
  : 0;
const estimatedReadingTime = wordCount
  ? Math.max(1, Math.round(wordCount / 200))
  : null;

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : SITE.ogImage
    ? new URL(`/${SITE.ogImage}`, Astro.url.origin).href
    : new URL("/og.png", Astro.url.origin).href;

const postUrl = new URL(getPath(post.id, post.filePath), SITE.website).href;

const articleStructuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  description: summary,
  image: ogImage,
  url: postUrl,
  datePublished: pubDatetime?.toISOString(),
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  ...(keywordString && { keywords: keywordString }),
  articleSection,
  inLanguage,
  isAccessibleForFree: true,
  ...(wordCount ? { wordCount } : {}),
  ...(estimatedReadingTime ? { timeRequired: `PT${estimatedReadingTime}M` } : {}),
  ...(keywordsList.length
    ? {
        about: keywordsList
          .filter(Boolean)
          .map((name: string) => ({
            "@type": "Thing",
            name,
          })),
      }
    : {}),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      ...(SITE.profile && { url: SITE.profile }),
    },
  ],
  publisher: {
    "@type": "Organization",
    name: SITE.title,
    url: SITE.website,
    logo: {
      "@type": "ImageObject",
      url: `${SITE.website}/favicon.svg`,
    },
  },
  isPartOf: {
    "@type": "Blog",
    name: SITE.title,
    url: `${SITE.website}/posts/`,
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": postUrl,
  },
};

const breadcrumbStructuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: SITE.title,
      item: SITE.website,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: "Blog",
      item: `${SITE.website}/posts/`,
    },
    {
      "@type": "ListItem",
      position: 3,
      name: title,
      item: postUrl,
    },
  ],
};

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  summary,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
  structuredData: articleStructuredData,
};

const relatedByTag = posts
  .filter(({ id }) => id !== post.id)
  .filter(({ data }) =>
    Array.isArray(data.tags) && data.tags.some(tag => tags.includes(tag))
  )
  .slice(0, 3);

const relatedFallback = posts
  .filter(({ id }) => id !== post.id)
  .filter(candidate => !relatedByTag.some(rel => rel.id === candidate.id))
  .slice(0, Math.max(0, 3 - relatedByTag.length));

const relatedPosts = [...relatedByTag, ...relatedFallback];

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <script
    slot="head"
    type="application/ld+json"
    is:inline
    set:html={JSON.stringify(breadcrumbStructuredData)}
  />
  {keywordString && (
    <meta slot="head" name="keywords" content={keywordString} />
  )}
  <meta slot="head" property="article:section" content={articleSection} />
  {keywordsList.length > 0 &&
    keywordsList.filter(Boolean).map((tag: string) => (
      <meta slot="head" property="article:tag" content={tag} />
    ))}
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-app px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="my-2 flex items-center gap-2">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
      <span
        aria-hidden="true"
        class:list={[
          "max-sm:hidden",
          { hidden: !SITE.editPost.enabled || hideEditPost },
        ]}>|</span
      >
      <EditPost {hideEditPost} {post} class="max-sm:hidden" />
    </div>
    <article
      id="article"
      class="app-prose mx-auto mt-8 max-w-app prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
    >
      <Content />
    </article>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    {
      relatedPosts.length > 0 && (
        <section class="my-10" aria-labelledby="related-posts-heading">
          <h2 id="related-posts-heading" class="mb-4 text-xl font-semibold">
            함께 읽으면 좋은 글
          </h2>
          <ul class="space-y-3">
            {relatedPosts.map(rel => (
              <li>
                <a
                  href={getPath(rel.id, rel.filePath)}
                  aria-label={`${title} 관련 글: ${rel.data.title}`}
                  class="group flex flex-col gap-1 rounded-md border border-border px-4 py-3 transition-colors hover:border-accent/60 hover:bg-accent/5"
                >
                  <span class="font-medium text-accent group-hover:underline">
                    {rel.data.title}
                  </span>
                  <span class="text-sm text-foreground/70">
                    {rel.data.summary ?? rel.data.description}
                  </span>
                </a>
              </li>
            ))}
          </ul>
        </section>
      )
    }

    <BackToTopButton />

    <ShareLinks />

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={getPath(prevPost.id, prevPost.filePath)}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none rtl:rotate-180" />
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={getPath(nextPost.id, nextPost.filePath)}
            class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none rtl:rotate-180" />
          </a>
        )
      }
    </div>
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ms-2 no-underline opacity-75 md:opacity-0 md:group-hover:opacity-100 md:focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Render Mermaid diagrams when code fences use ```mermaid */
  function initializeMermaid() {
    const mermaidBlocks = Array.from(
      document.querySelectorAll("pre[data-language='mermaid']")
    );

    if (!mermaidBlocks.length) {
      return;
    }

    for (const pre of mermaidBlocks) {
      if (!(pre instanceof HTMLElement)) {
        continue;
      }
      const source = pre.querySelector("code")?.textContent?.trim();
      if (!source) {
        continue;
      }

      const container = document.createElement("div");
      container.className = "mermaid";
      container.textContent = source;
      pre.replaceWith(container);
    }

    const renderDiagrams = async () => {
      if (!window.mermaid) {
        return;
      }
      try {
        window.mermaid.initialize({ startOnLoad: false });
        const nodes = Array.from(document.querySelectorAll(".mermaid"));
        let index = 0;
        for (const node of nodes) {
          if (!(node instanceof HTMLElement)) {
            continue;
          }
          const definition = node.textContent ?? "";
          if (!definition.trim()) {
            continue;
          }
          const id = `mermaid-${Date.now()}-${index++}`;
          try {
            const { svg } = await window.mermaid.render(id, definition);
            node.innerHTML = svg;
          } catch (error) {
            console.error("Mermaid render failed", error);
          }
        }
      } catch (error) {
        console.error("Mermaid render failed", error);
      }
    };

    if (window.mermaid) {
      renderDiagrams();
      return;
    }

    let script = document.querySelector("script[data-mermaid-loader]");
    if (script instanceof HTMLScriptElement) {
      script.addEventListener("load", () => {
        void renderDiagrams();
      }, { once: true });
      return;
    }

    script = document.createElement("script");
    script.src = "https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js";
    script.async = true;
    script.dataset.mermaidLoader = "true";
    script.addEventListener("load", () => {
      void renderDiagrams();
    }, { once: true });

    document.head.appendChild(script);
  }
  initializeMermaid();
  document.addEventListener("astro:after-swap", initializeMermaid);

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      if (codeBlock.dataset.language === "mermaid") {
        continue;
      }
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      // Check if --file-name-offset custom property exists
      const computedStyle = getComputedStyle(codeBlock);
      const hasFileNameOffset =
        computedStyle.getPropertyValue("--file-name-offset").trim() !== "";

      // Determine the top positioning class
      const topClass = hasFileNameOffset
        ? "top-(--file-name-offset)"
        : "-top-3";

      const copyButton = document.createElement("button");
      copyButton.className = `copy-code absolute end-3 ${topClass} rounded bg-muted border border-muted px-2 py-1 text-xs leading-4 text-foreground font-medium`;
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>

<script
  src="https://giscus.app/client.js"
  data-repo="flowkater/flowkater.io"
  data-repo-id="R_kgDOP1uhhQ"
  data-category="General"
  data-category-id="DIC_kwDOP1uhhc4Cv0oU"
  data-mapping="pathname"
  data-strict="0"
  data-reactions-enabled="1"
  data-emit-metadata="0"
  data-input-position="bottom"
  data-theme="preferred_color_scheme"
  data-lang="ko"
  crossorigin="anonymous"
  async></script>
